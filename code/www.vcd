$date
	Tue May  7 14:26:02 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var reg 1 ! CLK $end
$var reg 1 " RST $end
$var reg 32 # instruction [31:0] $end
$var reg 32 $ pc [31:0] $end
$var reg 5 % rd [4:0] $end
$var reg 5 & rs [4:0] $end
$var reg 5 ' rt [4:0] $end
$var integer 32 ( count [31:0] $end
$var integer 32 ) end_count [31:0] $end
$var integer 32 * handle [31:0] $end
$var integer 32 + i [31:0] $end
$var integer 32 , k [31:0] $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 32 - const_32d4 [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 . zero_out [31:0] $end
$var wire 32 / sign_out [31:0] $end
$var wire 32 0 shift_result [31:0] $end
$var wire 32 1 shamtt [31:0] $end
$var wire 2 2 select_slt [1:0] $end
$var wire 1 3 select_dst $end
$var wire 32 4 rtdata_new [31:0] $end
$var wire 32 5 rtdata [31:0] $end
$var wire 32 6 rsdata [31:0] $end
$var wire 5 7 rdaddr [4:0] $end
$var wire 32 8 pc_out [31:0] $end
$var wire 32 9 pc_in [31:0] $end
$var wire 32 : instr [31:0] $end
$var wire 1 ; en_write $end
$var wire 1 < alusrc $end
$var wire 3 = aluop [2:0] $end
$var wire 1 > alu_zero $end
$var wire 32 ? alu_result [31:0] $end
$var wire 1 @ alu_overflow $end
$var wire 4 A alu_operation [3:0] $end
$var wire 32 B Result [31:0] $end
$scope module AC $end
$var wire 4 C ALU_operation_o [3:0] $end
$var wire 2 D FURslt_o [1:0] $end
$var wire 6 E funct_i [5:0] $end
$var wire 3 F ALUOp_i [2:0] $end
$var reg 4 G ALU_operation [3:0] $end
$var reg 2 H FURslt [1:0] $end
$upscope $end
$scope module ALU $end
$var wire 4 I ALU_operation_i [3:0] $end
$var wire 1 @ overflow $end
$var wire 1 > zero $end
$var wire 32 J aluSrc2 [31:0] $end
$var wire 32 K aluSrc1 [31:0] $end
$var reg 32 L result [31:0] $end
$upscope $end
$scope module ALU_src2Src $end
$var wire 1 < select_i $end
$var wire 32 M data_o [31:0] $end
$var wire 32 N data1_i [31:0] $end
$var wire 32 O data0_i [31:0] $end
$upscope $end
$scope module Adder1 $end
$var wire 32 P src2_i [31:0] $end
$var wire 32 Q sum_o [31:0] $end
$var wire 32 R src1_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 3 S ALUOp_o [2:0] $end
$var wire 1 3 RegDst_o $end
$var wire 1 ; RegWrite_o $end
$var wire 6 T instr_op_i [5:0] $end
$var wire 1 < ALUSrc_o $end
$var reg 1 3 Dst $end
$var reg 3 U op [2:0] $end
$var reg 1 < src $end
$var reg 1 V write $end
$upscope $end
$scope module IM $end
$var wire 32 W pc_addr_i [31:0] $end
$var reg 32 X instr_o [31:0] $end
$var integer 32 Y i [31:0] $end
$upscope $end
$scope module Mux_Shift_Reg $end
$var wire 32 Z data0_i [31:0] $end
$var wire 1 [ select_i $end
$var wire 32 \ data_o [31:0] $end
$var wire 32 ] data1_i [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 ^ data0_i [4:0] $end
$var wire 5 _ data1_i [4:0] $end
$var wire 1 3 select_i $end
$var wire 5 ` data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 a pc_in_i [31:0] $end
$var wire 1 " rst_n $end
$var reg 32 b pc_out_o [31:0] $end
$upscope $end
$scope module RDdata_Source $end
$var wire 32 c data0_i [31:0] $end
$var wire 2 d select_i [1:0] $end
$var wire 32 e data_o [31:0] $end
$var wire 32 f data2_i [31:0] $end
$var wire 32 g data1_i [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 h RDaddr_i [4:0] $end
$var wire 32 i RDdata_i [31:0] $end
$var wire 5 j RSaddr_i [4:0] $end
$var wire 32 k RSdata_o [31:0] $end
$var wire 5 l RTaddr_i [4:0] $end
$var wire 32 m RTdata_o [31:0] $end
$var wire 1 ; RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_n $end
$upscope $end
$scope module SE $end
$var wire 16 n data_i [15:0] $end
$var wire 32 o data_o [31:0] $end
$upscope $end
$scope module ZF $end
$var wire 16 p data_i [15:0] $end
$var wire 32 q data_o [31:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 r leftRight $end
$var wire 32 s sftSrc [31:0] $end
$var wire 32 t shamt [31:0] $end
$var wire 32 u result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx u
bx t
bx s
xr
bx0000000000000000 q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx0000000000000000 f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
x[
b0xxxxx Z
b100000 Y
bx X
bx W
xV
bx U
bx T
bx S
bx R
bx Q
b100 P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
bx ?
x>
bx =
x<
x;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
bx /
bx0000000000000000 .
b100 -
b111 ,
b100000 +
b10 *
b11001 )
b0 (
bx '
bx &
bx %
bx $
b0 #
0"
0!
$end
#5000
0@
b11 B
b11 e
b11 i
0>
b11 ?
b11 L
b11 c
0r
1[
b11 0
b11 g
b11 u
b0 2
b0 D
b0 H
b0 d
b10 A
b10 C
b10 G
b10 I
03
1<
b110 =
b110 F
b110 S
b110 U
1;
1V
b11 4
b11 J
b11 M
b11 s
b0 1
b0 \
b0 t
b110 7
b110 `
b110 h
b0 Z
b110000000000000000 .
b110000000000000000 f
b110000000000000000 q
b11 p
b11 /
b11 N
b11 o
b11 n
b11 E
b110111 T
b0 5
b0 O
b0 m
b110 l
b0 6
b0 K
b0 ]
b0 k
b0 j
b0 _
b110 ^
b11011100000001100000000000000011 :
b11011100000001100000000000000011 X
b100 9
b100 Q
b100 a
b0 8
b0 R
b0 W
b0 b
1!
#10000
b110 '
b0 &
b11011100000001100000000000000011 #
b0 ,
b100 $
1"
0!
#15000
b1110 B
b1110 e
b1110 i
b1110 0
b1110 g
b1110 u
b1110 ?
b1110 L
b1110 c
b1110 4
b1110 J
b1110 M
b1110 s
b111 7
b111 `
b111 h
b11100000000000000000 .
b11100000000000000000 f
b11100000000000000000 q
b1110 p
b1110 /
b1110 N
b1110 o
b1110 n
b1110 E
b111 l
b111 ^
b11011100000001110000000000001110 :
b11011100000001110000000000001110 X
b1000 9
b1000 Q
b1000 a
b100 8
b100 R
b100 W
b100 b
b0 5
b0 O
b0 m
1!
#20000
b111 '
b1000 $
b11011100000001110000000000001110 #
b1 ,
b1 (
b0 %
b11111 +
0!
#25000
b10 B
b10 e
b10 i
0[
b1000 7
b1000 `
b1000 h
b1110 0
b1110 g
b1110 u
b0 A
b0 C
b0 G
b0 I
13
0<
b10 =
b10 F
b10 S
b10 U
b0 1
b0 \
b0 t
b10 ?
b10 L
b10 c
b1000000000101000000000000000000 .
b1000000000101000000000000000000 f
b1000000000101000000000000000000 q
b100000000010100 p
b100000000010100 /
b100000000010100 N
b100000000010100 o
b100000000010100 n
b10100 E
b111111 T
b11 6
b11 K
b11 ]
b11 k
b110 j
b1000 _
b11111100110001110100000000010100 :
b11111100110001110100000000010100 X
b1100 9
b1100 Q
b1100 a
b1000 8
b1000 R
b1000 W
b1000 b
b1110 5
b1110 O
b1110 m
1!
#30000
b1000 %
b110 &
b1100 $
b11111100110001110100000000010100 #
b10 ,
b10 (
b11111 +
0!
#35000
b1111 B
b1111 e
b1111 i
b1111 ?
b1111 L
b1111 c
1r
b1 A
b1 C
b1 G
b1 I
b1001 7
b1001 `
b1001 h
b1001000000101100000000000000000 .
b1001000000101100000000000000000 f
b1001000000101100000000000000000 q
b100100000010110 p
b100100000010110 /
b100100000010110 N
b100100000010110 o
b100100000010110 n
b10110 E
b1001 _
b11111100110001110100100000010110 :
b11111100110001110100100000010110 X
b10000 9
b10000 Q
b10000 a
b1100 8
b1100 R
b1100 W
b1100 b
1!
#40000
b1001 %
b10000 $
b11111100110001110100100000010110 #
b11 ,
b11 (
b11111 +
0!
#45000
1>
b1111000 B
b1111000 e
b1111000 i
b1111000 0
b1111000 g
b1111000 u
b11 1
b11 \
b11 t
b1 2
b1 D
b1 H
b1 d
b101 A
b101 C
b101 G
b101 I
b1111 4
b1111 J
b1111 M
b1111 s
b0 ?
b0 L
b0 c
b1010 7
b1010 `
b1010 h
b11 Z
b1010000110000000000000000000000 .
b1010000110000000000000000000000 f
b1010000110000000000000000000000 q
b101000011000000 p
b101000011000000 /
b101000011000000 N
b101000011000000 o
b101000011000000 n
b0 E
b1111 5
b1111 O
b1111 m
b1001 l
b0 6
b0 K
b0 ]
b0 k
b0 j
b1010 _
b1001 ^
b11111100000010010101000011000000 :
b11111100000010010101000011000000 X
b10100 9
b10100 Q
b10100 a
b10000 8
b10000 R
b10000 W
b10000 b
1!
#50000
b1010 %
b1001 '
b0 &
b10100 $
b11111100000010010101000011000000 #
b100 ,
b100 (
b11111 +
0!
#55000
b10000000000000000 B
b10000000000000000 e
b10000000000000000 i
0r
b1 0
b1 g
b1 u
b0 1
b0 \
b0 t
b10 2
b10 D
b10 H
b10 d
b100 A
b100 C
b100 G
b100 I
03
1<
b100 =
b100 F
b100 S
b100 U
b1 4
b1 J
b1 M
b1 s
b1011 7
b1011 `
b1011 h
b0 Z
b10000000000000000 .
b10000000000000000 f
b10000000000000000 q
b1 p
b1 /
b1 N
b1 o
b1 n
b1 E
b110000 T
b0 5
b0 O
b0 m
b1011 l
b0 _
b1011 ^
b11000000000010110000000000000001 :
b11000000000010110000000000000001 X
b11000 9
b11000 Q
b11000 a
b10100 8
b10100 R
b10100 W
b10100 b
1!
#60000
b1011 '
b11000 $
b11000000000010110000000000000001 #
b101 ,
b101 (
b11111 +
0!
#65000
b1110 1
b1110 \
b1110 t
b1000000000000000000000000000000 0
b1000000000000000000000000000000 g
b1000000000000000000000000000000 u
1r
1[
b1100 7
b1100 `
b1100 h
b1000000000000000000000000000000 B
b1000000000000000000000000000000 e
b1000000000000000000000000000000 i
b10000000000000000 4
b10000000000000000 J
b10000000000000000 M
b10000000000000000 s
b1 2
b1 D
b1 H
b1 d
b1111 A
b1111 C
b1111 G
b1111 I
13
0<
b10 =
b10 F
b10 S
b10 U
b1100000000001100000000000000000 .
b1100000000001100000000000000000 f
b1100000000001100000000000000000 q
b110000000000110 p
b110000000000110 /
b110000000000110 N
b110000000000110 o
b110000000000110 n
b110 E
b111111 T
b1110 6
b1110 K
b1110 ]
b1110 k
b111 j
b1100 _
b11111100111010110110000000000110 :
b11111100111010110110000000000110 X
b11100 9
b11100 Q
b11100 a
b11000 8
b11000 R
b11000 W
b11000 b
b10000000000000000 5
b10000000000000000 O
b10000000000000000 m
1!
#70000
b111 &
b11100 $
b11111100111010110110000000000110 #
b110 ,
b110 (
b1100 %
b11111 +
0!
#75000
b0 B
b0 e
b0 i
0[
b0 0
b0 g
b0 u
b101 A
b101 C
b101 G
b101 I
b0 4
b0 J
b0 M
b0 s
b0 1
b0 \
b0 t
b0 7
b0 `
b0 h
b0 .
b0 f
b0 q
b0 p
b0 /
b0 N
b0 o
b0 n
b0 E
b0 T
b0 5
b0 O
b0 m
b0 l
b0 6
b0 K
b0 ]
b0 k
b0 j
b0 _
b0 ^
b0 :
b0 X
b100000 9
b100000 Q
b100000 a
b11100 8
b11100 R
b11100 W
b11100 b
1!
#80000
b11001 (
b11111 +
0!
#85000
b100100 9
b100100 Q
b100100 a
b100000 8
b100000 R
b100000 W
b100000 b
1!
#90000
0!
#95000
b101000 9
b101000 Q
b101000 a
b100100 8
b100100 R
b100100 W
b100100 b
1!
#100000
